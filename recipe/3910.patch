From b236af724031134d626e64e3f28a94525981eb80 Mon Sep 17 00:00:00 2001
From: Weiqun Zhang <weiqunzhang@lbl.gov>
Date: Sun, 28 Apr 2024 22:14:34 -0700
Subject: [PATCH] Workaround for Windows omp_lock_t issue

---
 Src/Base/AMReX_OpenMP.H   |  8 ++++++++
 Src/Base/AMReX_OpenMP.cpp | 24 ++++++++++++++++++++++++
 2 files changed, 32 insertions(+)

diff --git a/Src/Base/AMReX_OpenMP.H b/Src/Base/AMReX_OpenMP.H
index 15d6854c92..67e180003d 100644
--- a/Src/Base/AMReX_OpenMP.H
+++ b/Src/Base/AMReX_OpenMP.H
@@ -17,7 +17,15 @@ namespace amrex::OpenMP {
     void Initialize ();
     void Finalize ();
 
+#if defined(_WIN32)
+    void** get_lock_impl (int ilock);
+
+    inline omp_lock_t* get_lock (int ilock) {
+        return (omp_lock_t*)(*(get_lock_impl(ilock)));
+    }
+#else
     omp_lock_t* get_lock (int ilock);
+#endif
 }
 
 #else // AMREX_USE_OMP
diff --git a/Src/Base/AMReX_OpenMP.cpp b/Src/Base/AMReX_OpenMP.cpp
index fafb00c11c..53782c8c34 100644
--- a/Src/Base/AMReX_OpenMP.cpp
+++ b/Src/Base/AMReX_OpenMP.cpp
@@ -137,7 +137,11 @@ namespace amrex::OpenMP
 {
     namespace {
         constexpr int nlocks = 128;
+#if defined(_WIN32)
+        void* omp_locks[nlocks];
+#else
         omp_lock_t omp_locks[nlocks];
+#endif
         unsigned int initialized = 0;
     }
 
@@ -183,9 +187,17 @@ namespace amrex::OpenMP
             }
         }
 
+#if defined(_WIN32)
+        for (auto& vp : omp_locks) {
+            auto* p = new omp_lock_t;
+            omp_init_lock(p);
+            vp = (void*) p;
+        }
+#else
         for (auto& lck : omp_locks) {
             omp_init_lock(&lck);
         }
+#endif
 
         ++initialized;
     }
@@ -195,14 +207,26 @@ namespace amrex::OpenMP
         if (initialized) {
             --initialized;
             if (initialized == 0) {
+#if defined(_WIN32)
+                for (auto vp : omp_locks) {
+                    auto* p = (omp_lock_t*)vp;
+                    omp_destroy_lock(p);
+                    delete p;
+                }
+#else
                 for (auto& lck : omp_locks) {
                     omp_destroy_lock(&lck);
                 }
+#endif
             }
         }
     }
 
+#if defined(_WIN32)
+    void** get_lock_impl(int ilock)
+#else
     omp_lock_t* get_lock (int ilock)
+#endif
     {
         ilock = ilock % nlocks;
         if (ilock < 0) { ilock += nlocks; }
