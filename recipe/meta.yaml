{% set name = "amrex" %}
{% set version = "24.05" %}
{% set build = 1 %}

# ensure mpi is defined (needed for conda-smithy recipe-lint)
{% set mpi = mpi or 'nompi' %}

# prioritize nompi variant via build number
{% if mpi == 'nompi' %}
{% set build = build + 100 %}
{% endif %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/AMReX-Codes/amrex/archive/refs/tags/{{ version }}.tar.gz
  sha256: 97b3d192480a3a1b3a0facd903ada05d5c4cfb915f3e7365ec104fbca54cfb68
  patches:
    # OpenMP public symbols on Windows
    # https://github.com/AMReX-Codes/amrex/pull/3910
    - 3910.patch

build:
  number: {{ build }}

  # add build string so packages can depend on
  # mpi or nompi variants
  # dependencies:
  # `pkg * mpi_mpich_*` for mpich
  # `pkg * mpi_*` for any mpi
  # `pkg * nompi_*` for no mpi
  {% if mpi == 'nompi' %}
  {% set mpi_prefix = "nompi" %}
  {% else %}
  {% set mpi_prefix = "mpi_" + mpi %}
  {% endif %}
  string: {{ mpi_prefix }}_h{{ PKG_HASH }}_{{ build }}

  run_exports:
    # strict runtime dependency on build-time MPI flavor
    - {{ name }} * {{ mpi_prefix }}_*
    # Releases are not (yet) compatible:
    # There is no ABI compatibility check or guarantee between AMReX releases.
    - amrex {{ version }}

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ stdlib("c") }}
    - clang         # [win]
    - cmake
    - lld           # [win]
    - make          # [unix]
    - ninja         # [win]
    - libgomp       # [linux]
    - llvm-openmp   # [osx or win]
    - pkgconfig
    # In OpenMPI, the compiler wrappers are binaries and the wrappers in build
    # can use host libraries by adding OPAL_PREFIX and in mpich, compiler
    # wrappers are bash scripts and wrappers in build can't use host libraries.
    - openmpi  # [mpi == "openmpi" and (build_platform != target_platform)]
  host:
    - {{ mpi }}  # [mpi != 'nompi']
  run:
    - {{ mpi }}  # [mpi != 'nompi']
    - libcxx  # [osx]

test:
  commands:
    - test -f ${PREFIX}/lib/libamrex_1d.so  # [linux]
    - test -f ${PREFIX}/lib/libamrex_2d.so  # [linux]
    - test -f ${PREFIX}/lib/libamrex_3d.so  # [linux]
    - test -f ${PREFIX}/lib/libamrex_1d.dylib  # [osx]
    - test -f ${PREFIX}/lib/libamrex_2d.dylib  # [osx]
    - test -f ${PREFIX}/lib/libamrex_3d.dylib  # [osx]
    - if not exist %LIBRARY_PREFIX%\bin\amrex_1d.dll exit 1  # [win]
    - if not exist %LIBRARY_PREFIX%\bin\amrex_2d.dll exit 1  # [win]
    - if not exist %LIBRARY_PREFIX%\bin\amrex_3d.dll exit 1  # [win]

about:
  home: https://amrex-codes.github.io/amrex/
  license: BSD-3-Clause-LBNL
  license_family: BSD
  license_file: LICENSE
  summary: A software framework for massively parallel, block-structured adaptive mesh refinement (AMR) applications

  description: |
    AMReX is a software framework containing all the functionality to write
    massively parallel, block-structured adaptive mesh refinement (AMR)
    applications. AMReX is developed at LBNL, NREL, and ANL as part of the
    Block-Structured AMR Co-Design Center in DOE's Exascale Computing Project.

  doc_url: https://amrex-codes.github.io/amrex/docs_html/
  dev_url: https://github.com/AMReX-Codes/amrex

extra:
  recipe-maintainers:
    - atmyers
    - ax3l
    - WeiqunZhang
